# 3. Создайте собственный класс-исключение, который должен проверять содержимое списка на наличие только чисел.
# Проверить работу исключения на реальном примере.
# Необходимо запрашивать у пользователя данные и заполнять список.
# Класс-исключение должен контролировать типы данных элементов списка.
# Примечание: длина списка не фиксирована.
# Элементы запрашиваются бесконечно, пока пользователь сам не остановит работу скрипта,
# введя, например, команду “stop”. При этом скрипт завершается, сформированный список выводится на экран.
# Подсказка: для данного задания примем, что пользователь может вводить только числа и строки.
# При вводе пользователем очередного элемента необходимо реализовать проверку типа элемента и вносить его в список,
# только если введено число.
# Класс-исключение должен не позволить пользователю ввести текст (не число)
# и отобразить соответствующее сообщение.
# При этом работа скрипта не должна завершаться.
from contextlib import suppress


class ItsTextException(Exception):

    @classmethod
    def to_num(cls, num):
        with suppress(ValueError):
            return int(num)
        raise cls(f'{num} - это не число')


def el_to_num(el):
    try:
        return ItsTextException.to_num(el)
    except ItsTextException as e:
        print(e)


def main():
    res = []
    while True:
        seq = input('введите последовательность через пробел. Для выхода введите stop\n').split()
        if 'stop' in seq:
            res.extend(el for el in map(el_to_num, seq[:seq.index('stop')]) if el is not None)
            break
        res.extend(el for el in map(el_to_num, seq) if el is not None)
    print(res)


if __name__ == '__main__':
    main()
